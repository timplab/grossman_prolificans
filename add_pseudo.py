import argparse

##gfffile='/pym/Data/Nanopore/projects/prolificans/nina_annot/st31.final2.fasta.functional_note.pseudo_label.gff'
##valfile='/pym/Data/Nanopore/projects/prolificans/nina_annot/st31.val'
##outfile='/pym/Data/Nanopore/projects/prolificans/nina_annot/st31.final2.fasta.functional_note.pseudo_label.yfan.gff'

def parseArgs():
    parser = argparse.ArgumentParser(description='add pseudo label to gff')
    parser.add_argument('-g','--gfffile', type=str, required=True, 
            help="gff file that lacks pseudogene annotations")
    parser.add_argument('-v','--valfile', type=str, required=True, 
            help="val file generated by tbl2sqn that lists errors")
    parser.add_argument('-o','--outfile', type=str, required=True, 
            help="output for new gff")
    args = parser.parse_args()
    return(args)


def main(gfffile, valfile, outfile):
    ##read in the gff
    with open(gfffile, 'r') as f:
        gff = f.read().split('\n')

    gff = list(filter(None, gff))

    with open(valfile, 'r') as f:
        val = f.read().split('\n')

    val = list(filter(None, val))

    locations = []
    for i in val:
        if i.startswith('Error'):
            if 'StopInProtein' in i or 'InternalStop' in i:
                locations.append(i.split('|')[-1][:-1])

    newgff = []
    for i in gff:
        added = False
        ##loop through locations list and see if the line needs a pseudo
        for j in locations:
            if j in i:
                added = True
                if i.endswith(';'):
                    newgff.append(i+'pseudogene=unknown;'+'\n')
                else:
                    newgff.append(i+';pseudogene=unknown'+'\n')
                break
        ##if pseudo not needed, add back the line as is
        if not added:
            newgff.append(i+'\n')

    with open(outfile, 'w') as f:
        for i in newgff:
            f.write(i)
        
if __name__=="__main__":
    args = parseArgs()
    main(args.gfffile, args.valfile, args.outfile)
    
